@page "/imageGame/manage-categories"
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Admin")]

@using GameHub.Application.ImageGame.Category.Dto 
@using GameHub.Application.ImageGame.Category.Repository

@inject ICategoryService CategoryService
@inject ModalService ModalService

<PageTitle>Manage Categories</PageTitle>

<h3>Manage Categories</h3>
@if (!string.IsNullOrEmpty(message))
{
    <AlertSection Status="@status" Message="@message" />
}
<div class="container mt-4">
    @if (tempCategoryDtos!.Any())
    {
        <div class="table-responsive">
            <QuickGrid Items="categoryDtos" Class="table table-striped table-bordered table-hover" Pagination="pagination">
                <PropertyColumn Title="Id" Property="@(l => l.Id)" Sortable="true" />
                <TemplateColumn Title="Name" SortBy="sortByName">
                    <Editable IsEditable="@(editedItemId != context.Id)">
                        <MainContent>
                            <p>@context.Name</p>
                        </MainContent>

                        <EditContent>
                            <InputText @bind-Value="context.Name" class="form-control" />
                        </EditContent>
                    </Editable>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <Editable IsEditable="@(editedItemId != context.Id)">
                        <MainContent>
                            <ButtonSection Text="Edit" Action="() => MakeInputSelectable(context.Id)" Class="btn btn-outline-warning me-2" />
                            <ButtonSection Text="Remove" Action="() => DeleteLevel(context.Id)" Class="btn btn-outline-danger" />
                        </MainContent>

                        <EditContent>
                            <ButtonSection Text="Save" Action="() => UpdateLevel(context)" Class="btn btn-success" />
                            <ButtonSection Text="Cancel" Action="CancelUpdate" Class="btn btn-danger" />
                        </EditContent>
                    </Editable>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <Paginator State="pagination" />
    }
    else
    {
        <h3>There is no category to show</h3>
    }
</div>
<ModalSection />

@code {
    private IQueryable<CategoryDto>? categoryDtos;
    private List<CategoryDto>? tempCategoryDtos = [];

    private GridSort<CategoryDto> sortByName = GridSort<CategoryDto>.ByAscending(x => x.Name).ThenDescending(x => x.Name);
    private PaginationState pagination = new() { ItemsPerPage = 10 };

    private int editedItemId;
    private string message = string.Empty;
    private string status = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        CancellationTokenSource cts = new();
        List<CategoryDto>? response = await CategoryService.GetAllAsync(cts.Token);

        categoryDtos = response?.AsQueryable();
        tempCategoryDtos = response?.Select(c => new CategoryDto
        {
            Id = c.Id,
            Name = c.Name
        }).ToList();
    }

    private async void DeleteLevel(int categoryId, CancellationToken cancellationToken = default)
    {
        var result = await ModalService.FireAsync(new ModalOptions { Text = "Are you sure you want to delete the category?", ShowConfirmButton = true, ShowDenyButton = true });
        if (result.IsConfirmed)
        {
            int deletedItem = await CategoryService.DeleteAsync(categoryId, cancellationToken);

            message = deletedItem == 0 ? "Failed to delete category" : "Category deleted successfully";
            status = deletedItem == 0 ? "danger" : "success";

            DeleteCategoryFromTable(categoryId);
            StateHasChanged();
        }
    }


    private void DeleteCategoryFromTable(int id)
        => categoryDtos = categoryDtos?.Where(c => c.Id != id);


    private async void UpdateLevel(CategoryDto categoryDto, CancellationToken cancellationToken = default)
    {
        var result = await ModalService.FireAsync(new ModalOptions { Text = "Are you sure you want to update the category?", ShowConfirmButton = true, ShowDenyButton = true });

        if (result.IsConfirmed)
        {
            int updateResult = await CategoryService.UpdateAsync(categoryDto, cancellationToken);

            status = updateResult == -1 || updateResult == -2 || updateResult == 0 ? "danegr" : "success";
            message = updateResult == -1 ? "Validation failed" : updateResult == 0 ? "Failed to update Category" : "Category updated successfully";
            if (updateResult > 0) // Success
            {
                MakeInputUnSelectable();
            }
            StateHasChanged();
            message = string.Empty;
        }
    }


    private void MakeInputSelectable(int categoryId)
        => editedItemId = categoryId;


    private void MakeInputUnSelectable()
        => editedItemId = 0;


    private void CancelUpdate()
    {
        CategoryDto? tempItem = tempCategoryDtos?.Single(dto => dto.Id == editedItemId);
        CategoryDto? tableItem = categoryDtos?.Single(dto => dto.Id == editedItemId);

        tableItem!.Name = tempItem!.Name;

        MakeInputUnSelectable();
    }
}
