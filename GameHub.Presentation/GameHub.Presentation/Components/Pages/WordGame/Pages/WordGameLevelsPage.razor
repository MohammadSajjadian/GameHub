@page "/WordGame-levels/{CategoryName}/{CategoryId:int}"

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IMediator Mediator
@inject IWordGameLevelService LevelService
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavManager
@inject HealthService HealthService
@inject ModalService ModalService

<div class="d-flex justify-content-between">
    <h3>Levels</h3>
    <Health Value="HealthService.Value" />
</div>
@if (levelDtos!.Any())
{
    <div class="row row-cols-1 row-cols-md-4 g-4 justify-content-center mt-5">
        @foreach (var levelDto in levelDtos!)
        {
            <WordGameCardSection LevelDto="levelDto" OnNav="NavToLevel" />
        }
    </div>
}
else
{
    <p>There is no level to show</p>
}
<ModalSection />

@code {
    [Parameter, EditorRequired] public int CategoryId { get; set; }
    [Parameter, EditorRequired] public string CategoryName { get; set; } = default!;

    private List<WordGameLevelDto>? levelDtos = new();
    private string? message;
    private bool? isAuthenticated;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cts = new CancellationTokenSource();
            var authState = await ConfigAuthAsync();
            if (isAuthenticated is true)
            {
                int profileHealth = await HealthService.GetProfileHealthAsync(authState.User.Identity?.Name!);
                if (profileHealth == 0)
                {
                    message = "You need more health.";
                }
            }
            else
            {
                int? localHealth = await HealthService.GetLocalHealthAsync();
                if (localHealth.HasValue && localHealth.Value == 0)
                {
                    message = "You need to log in to continue.";
                }
            }
            levelDtos = await LevelService.GetAllByIdAsync(CategoryId, cts.Token);
            StateHasChanged();
        }
    }

    private async Task<AuthenticationState> ConfigAuthAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated;

        return authState;
    }

    private async Task NavToLevel(int levelId)
    {
        if (HealthService.Value == 0)
        {
            await ModalService.FireAsync(new ModalOptions { Text = message, ShowConfirmButton = true, ConfirmButtonText = "ok" });
        }
        else
        {
            NavManager.NavigateTo($"/level/{levelId}/{CategoryName}/{CategoryId}");
        }
    }
}
