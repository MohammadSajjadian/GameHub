@implements IDisposable
@using System.Timers

<div class="clock">
    <h1>@Time</h1>
</div>

@code {
    private Timer? _timer = null;
    private int _secondsToRun = 0;

    protected string Time { get; set; } = "00:00";

    [Parameter]
    public EventCallback TimerOut { get; set; }

    public void Start(int secondsToRun)
    {
        _secondsToRun = secondsToRun;

        if (_secondsToRun > 0)
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
            _timer?.Start();
        }
    }

    public void Stop()
    {
        _timer?.Stop();
    }

    protected override void OnInitialized()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimedEvent;
        _timer.AutoReset = true;
    }

    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        _secondsToRun--;

        await InvokeAsync(() =>
        {
            Time = TimeSpan.FromSeconds(_secondsToRun).ToString(@"mm\:ss");
            StateHasChanged();
        });

        if (_secondsToRun <= 0)
        {
            _timer?.Stop();
            await InvokeAsync(async () => await TimerOut.InvokeAsync());
        }
    }

    void IDisposable.Dispose()
    {
        _timer?.Dispose();
    }
}
