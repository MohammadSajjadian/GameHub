@page "/level/{LevelId:int}/{CategoryName}/{CategoryId:int}"

@rendermode @(new InteractiveAutoRenderMode(false))

@inject IMediator Mediator
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider Auth
@inject NavigationManager NavManager
@inject WordService WordService
@inject HealthService HealthService
@inject ModalService ModalService

<PageTitle>Guess the Word</PageTitle>
<div class="d-flex justify-content-between">
    <h3>Guess the word</h3>
    <Health Value="HealthService.Value" />
</div>
<CountDown @ref="timer" TimerOut="TimeOut" />
@if (!string.IsNullOrEmpty(WordService?.Value))
{
    <div class="container" style="position: relative; top: 14rem;">
        <div class="row justify-content-center">
            @{ int wordCount = WordService.Letters.Count;}
            @foreach (var letter in WordService.Letters)
            {
                var letterData = letter;
                <LetterSection Letter="letterData" CheckAnswer="CheckAnswer" IsGuideActive="WordService.IsGuideActive" />
            }
        </div>
        <HintSection Text="@WordService.GetHint()" />
    </div>
    <ModalSection />
}
else
{
    <p>@message</p>
}

@code {
    private CountDown timer = default!;
    private string? userName;
    private string? message;
    private int PercentageOfCharsToHide;
    private int remainingTime;
    private bool isGameEnded;
    private bool? isAuthenticated;

    private string LevelsRoute => $"/WordGame-levels/{CategoryName}/{CategoryId}";
    [Parameter, EditorRequired] public int LevelId { get; set; }
    [Parameter, EditorRequired] public int CategoryId { get; set; }
    [Parameter, EditorRequired] public string CategoryName { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var response = await Mediator.Send(new WordGameGetLevelRequest(LevelId));
        if (response.StatusCode == 404)
        {
            message = response.Message;
            return;
        }

        var authState = await ConfigAuthAsync();
        if (isAuthenticated is true)
        {
            userName = authState.User.Identity?.Name;
            int profileHealth = await HealthService.GetProfileHealthAsync(userName!);
            if (profileHealth == 0)
            {
                message = "You need more health.";
                return;
            }
        }
        else
        {
            int? localHealth = await HealthService.GetLocalHealthAsync();
            if (localHealth.HasValue && localHealth.Value == 0)
            {
                message = "You need to log in to continue.";
                return;
            }
        }
        PercentageOfCharsToHide = (int)response.LevelDto!.LevelStatus;
        SetRemainingTime(response);
        timer.Start(remainingTime);

        WordService.Initialize(response.LevelDto!.Word, response.LevelDto.Hint, remainingTime);
    }

    private async Task<AuthenticationState> ConfigAuthAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated;

        return authState;
    }

    private void SetRemainingTime(WordGameGetLevelRequest.Response response)
    {
        remainingTime = response.LevelDto!.LevelStatus switch
        {
            LevelStatus.Easy => 30,
            LevelStatus.Medium => 40,
            LevelStatus.Hard => 60,
            _ => throw new ArgumentOutOfRangeException(nameof(response.LevelDto.LevelStatus), $"Not expected difficulty value: {response.LevelDto.LevelStatus}"),
        };
    }

    private async Task CheckAnswer()
    {
        if (IsInputsValid())
        {
            int? localHealth = await LocalStorage.GetItemAsync<int?>("Health");
            if (localHealth is not null && localHealth > HealthService.maxLocalHealth || localHealth < 0)
            {
                await HealthService.PreventChangeLocalHealthAsync();
            }
            if (WordService!.IsAnswerCorrect())
            {
                timer.Stop();
                await ModalService.FireAsync(new ModalOptions { Text = "Thats correct", ShowConfirmButton = true, ConfirmButtonText = "Go to the next one →" });

                var response = await Mediator.Send(new WordGameGetNextLevelRequest(LevelId, CategoryId));

                if (response.StatusCode == 404)
                {
                    await Task.Delay(300);
                    await ModalService.FireAsync(new ModalOptions { Title = "Congratulations🎉", Text = "You passed all levels🥳", ShowConfirmButton = true, ConfirmButtonText = "Go to the home →" });
                    NavManager.NavigateTo(LevelsRoute);
                    return;
                }

                NavManager.NavigateTo($"/level/{response!.LevelDto!.Id}/{CategoryName}/{CategoryId}");
                WordService.Initialize(response.LevelDto!.Word, response.LevelDto.Hint, remainingTime);
            }
            else
            {
                var modalOptions = new ModalOptions { Text = "You Lost🙁", ShowDenyButton = true, DenyButtonText = "Try again", ShowConfirmButton = false, AllowOutsideClick = false };

                AddConfirmButton(modalOptions);
                await StopGame(modalOptions);
            }
        }
    }

    private void AddConfirmButton(ModalOptions modalOptions)
    {
        if (!WordService!.IsGuideActive)
        {
            modalOptions.Text = "Want some help?💡";
            modalOptions.ShowConfirmButton = true;
            modalOptions.ConfirmButtonText = "Yes";
        }
    }

    private bool IsInputsValid()
    => !WordService!.Letters.Any(l => l.Value == '\0') && !isGameEnded;

    private async Task StopGame(ModalOptions options)
    {
        timer.Stop();
        isGameEnded = true;
        if (isAuthenticated is true && HealthService.Value > 0)
        {
            await HealthService.ReduceFromProfileAsync(userName!);
        }
        else
        {
            await HealthService.ReduceFromLocalAsync();
        }
        if (HealthService.Value > 0)
        {
            var result = await ModalService.FireAsync(options);

            timer.Start(remainingTime);
            if (result.IsConfirmed)
            {
                await Task.Delay(300);
                await ModalService.FireAsync(new ModalOptions { Text = "From now, Every letter you choose correctly will turn green", ShowConfirmButton = true, ConfirmButtonText = "ok" });
                WordService!.ActivateGuide();
            }
        }
        else
        {
            var result = await ModalService.FireAsync(new ModalOptions { Title = "You ran out of chance💔", Text = "You will gain one health point every 30 seconds", ShowConfirmButton = true, ConfirmButtonText = "Go to Home", AllowOutsideClick = false });
            NavManager.NavigateTo(LevelsRoute);
        }

        WordService!.ClearLettersAtRandomIndices();
        isGameEnded = false;
    }

    private async Task TimeOut()
    {
        var modalOptions = new ModalOptions { Title = "Time is over⏱️", Text = "You ran out of time", ShowDenyButton = true, DenyButtonText = "Try again", ShowConfirmButton = false, AllowOutsideClick = false };

        AddConfirmButton(modalOptions);
        await StopGame(modalOptions);
    }
}
